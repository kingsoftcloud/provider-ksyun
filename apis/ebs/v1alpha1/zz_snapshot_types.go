/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnapshotObservation struct {

	// Availability zone.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The creation time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Snapshot progress. Example value: 100%.
	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	// The size of the snapshot, unit is 'GB'.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The description of the snapshot.
	SnapshotDesc *string `json:"snapshotDesc,omitempty" tf:"snapshot_desc,omitempty"`

	// The name of the snapshot.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// snapshot status.
	SnapshotStatus *string `json:"snapshotStatus,omitempty" tf:"snapshot_status,omitempty"`

	// The type of the snapshot, valid values: 'LocalSnapShot', 'CommonSnapShot'. Default is 'CommonSnapShot'.
	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	// The category of the volume, 'data' or 'system'.
	VolumeCategory *string `json:"volumeCategory,omitempty" tf:"volume_category,omitempty"`

	// The ID of the volume. Snapshot requires the Volume to be in "in-use" or "available" status.When the Volume status is "in-use", the kec instance status can be either "running" or "stopped".
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Volume status.
	VolumeStatus *string `json:"volumeStatus,omitempty" tf:"volume_status,omitempty"`
}

type SnapshotParameters struct {

	// The description of the snapshot.
	// +kubebuilder:validation:Optional
	SnapshotDesc *string `json:"snapshotDesc,omitempty" tf:"snapshot_desc,omitempty"`

	// The name of the snapshot.
	// +kubebuilder:validation:Optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// The type of the snapshot, valid values: 'LocalSnapShot', 'CommonSnapShot'. Default is 'CommonSnapShot'.
	// +kubebuilder:validation:Optional
	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	// The ID of the volume. Snapshot requires the Volume to be in "in-use" or "available" status.When the Volume status is "in-use", the kec instance status can be either "running" or "stopped".
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/ebs/v1alpha1.Volume
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a Volume in ebs to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a Volume in ebs to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

// SnapshotSpec defines the desired state of Snapshot
type SnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotParameters `json:"forProvider"`
}

// SnapshotStatus defines the observed state of Snapshot.
type SnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Snapshot is the Schema for the Snapshots API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type Snapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotSpec   `json:"spec"`
	Status            SnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotList contains a list of Snapshots
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snapshot `json:"items"`
}

// Repository type metadata.
var (
	Snapshot_Kind             = "Snapshot"
	Snapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Snapshot_Kind}.String()
	Snapshot_KindAPIVersion   = Snapshot_Kind + "." + CRDGroupVersion.String()
	Snapshot_GroupVersionKind = CRDGroupVersion.WithKind(Snapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&Snapshot{}, &SnapshotList{})
}
