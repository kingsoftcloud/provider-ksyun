/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KecNetworkInterfaceAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The ID of the network interface.
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// The type of the network interface.
	NetworkInterfaceType *string `json:"networkInterfaceType,omitempty" tf:"network_interface_type,omitempty"`
}

type KecNetworkInterfaceAttachmentParameters struct {

	// The ID of the instance.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/kec/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in kec to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in kec to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// The ID of the network interface.
	// +kubebuilder:validation:Optional
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`
}

// KecNetworkInterfaceAttachmentSpec defines the desired state of KecNetworkInterfaceAttachment
type KecNetworkInterfaceAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KecNetworkInterfaceAttachmentParameters `json:"forProvider"`
}

// KecNetworkInterfaceAttachmentStatus defines the observed state of KecNetworkInterfaceAttachment.
type KecNetworkInterfaceAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KecNetworkInterfaceAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KecNetworkInterfaceAttachment is the Schema for the KecNetworkInterfaceAttachments API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type KecNetworkInterfaceAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.networkInterfaceId)",message="networkInterfaceId is a required parameter"
	Spec   KecNetworkInterfaceAttachmentSpec   `json:"spec"`
	Status KecNetworkInterfaceAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KecNetworkInterfaceAttachmentList contains a list of KecNetworkInterfaceAttachments
type KecNetworkInterfaceAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KecNetworkInterfaceAttachment `json:"items"`
}

// Repository type metadata.
var (
	KecNetworkInterfaceAttachment_Kind             = "KecNetworkInterfaceAttachment"
	KecNetworkInterfaceAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KecNetworkInterfaceAttachment_Kind}.String()
	KecNetworkInterfaceAttachment_KindAPIVersion   = KecNetworkInterfaceAttachment_Kind + "." + CRDGroupVersion.String()
	KecNetworkInterfaceAttachment_GroupVersionKind = CRDGroupVersion.WithKind(KecNetworkInterfaceAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&KecNetworkInterfaceAttachment{}, &KecNetworkInterfaceAttachmentList{})
}
