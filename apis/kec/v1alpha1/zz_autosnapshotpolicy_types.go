/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoSnapshotPolicyObservation struct {

	// Setting the snapshot date in a week, its scope is between 1 and 7.
	AutoSnapshotDate []*float64 `json:"autoSnapshotDate,omitempty" tf:"auto_snapshot_date,omitempty"`

	// The id of auto snapshot policy.
	AutoSnapshotPolicyID *string `json:"autoSnapshotPolicyId,omitempty" tf:"auto_snapshot_policy_id,omitempty"`

	// Setting the snapshot time in a day, its scope is between 0 and 23.
	AutoSnapshotTime []*float64 `json:"autoSnapshotTime,omitempty" tf:"auto_snapshot_time,omitempty"`

	// The snapshot policy creation date.
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the name of auto snapshot policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// the snapshot will be reserved for when, the cap is 9999.
	RetentionTime *float64 `json:"retentionTime,omitempty" tf:"retention_time,omitempty"`
}

type AutoSnapshotPolicyParameters struct {

	// Setting the snapshot date in a week, its scope is between 1 and 7.
	// +kubebuilder:validation:Optional
	AutoSnapshotDate []*float64 `json:"autoSnapshotDate,omitempty" tf:"auto_snapshot_date,omitempty"`

	// Setting the snapshot time in a day, its scope is between 0 and 23.
	// +kubebuilder:validation:Optional
	AutoSnapshotTime []*float64 `json:"autoSnapshotTime,omitempty" tf:"auto_snapshot_time,omitempty"`

	// the name of auto snapshot policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// the snapshot will be reserved for when, the cap is 9999.
	// +kubebuilder:validation:Optional
	RetentionTime *float64 `json:"retentionTime,omitempty" tf:"retention_time,omitempty"`
}

// AutoSnapshotPolicySpec defines the desired state of AutoSnapshotPolicy
type AutoSnapshotPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutoSnapshotPolicyParameters `json:"forProvider"`
}

// AutoSnapshotPolicyStatus defines the observed state of AutoSnapshotPolicy.
type AutoSnapshotPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutoSnapshotPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicy is the Schema for the AutoSnapshotPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type AutoSnapshotPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.autoSnapshotDate)",message="autoSnapshotDate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.autoSnapshotTime)",message="autoSnapshotTime is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   AutoSnapshotPolicySpec   `json:"spec"`
	Status AutoSnapshotPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicyList contains a list of AutoSnapshotPolicys
type AutoSnapshotPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoSnapshotPolicy `json:"items"`
}

// Repository type metadata.
var (
	AutoSnapshotPolicy_Kind             = "AutoSnapshotPolicy"
	AutoSnapshotPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoSnapshotPolicy_Kind}.String()
	AutoSnapshotPolicy_KindAPIVersion   = AutoSnapshotPolicy_Kind + "." + CRDGroupVersion.String()
	AutoSnapshotPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AutoSnapshotPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AutoSnapshotPolicy{}, &AutoSnapshotPolicyList{})
}
