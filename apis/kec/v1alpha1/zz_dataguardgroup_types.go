/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataGuardGroupObservation struct {

	// The capacity of data guard group.
	DataGuardCapacity *float64 `json:"dataGuardCapacity,omitempty" tf:"data_guard_capacity,omitempty"`

	// The id of data guard group.
	DataGuardID *string `json:"dataGuardId,omitempty" tf:"data_guard_id,omitempty"`

	// The data guard group level, if the value is Host represent machine level, and the tol represent the domain of disaster tolerance.
	DataGuardLevel *string `json:"dataGuardLevel,omitempty" tf:"data_guard_level,omitempty"`

	// The name of data guard group.
	DataGuardName *string `json:"dataGuardName,omitempty" tf:"data_guard_name,omitempty"`

	// The data guard group display type, Value options: [ host, domain ]. <br> - Host: represent machine level <br> - Domain: represent the domain of disaster tolerance <br> Note: some account doesn't support domain data guard.
	DataGuardType *string `json:"dataGuardType,omitempty" tf:"data_guard_type,omitempty"`

	// This data guard group includes the amount of instances.
	DataGuardUsedSize *float64 `json:"dataGuardUsedSize,omitempty" tf:"data_guard_used_size,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataGuardGroupParameters struct {

	// The name of data guard group.
	// +kubebuilder:validation:Optional
	DataGuardName *string `json:"dataGuardName,omitempty" tf:"data_guard_name,omitempty"`

	// The data guard group display type, Value options: [ host, domain ]. <br> - Host: represent machine level <br> - Domain: represent the domain of disaster tolerance <br> Note: some account doesn't support domain data guard.
	// +kubebuilder:validation:Optional
	DataGuardType *string `json:"dataGuardType,omitempty" tf:"data_guard_type,omitempty"`
}

// DataGuardGroupSpec defines the desired state of DataGuardGroup
type DataGuardGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataGuardGroupParameters `json:"forProvider"`
}

// DataGuardGroupStatus defines the observed state of DataGuardGroup.
type DataGuardGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataGuardGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataGuardGroup is the Schema for the DataGuardGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type DataGuardGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dataGuardName)",message="dataGuardName is a required parameter"
	Spec   DataGuardGroupSpec   `json:"spec"`
	Status DataGuardGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataGuardGroupList contains a list of DataGuardGroups
type DataGuardGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataGuardGroup `json:"items"`
}

// Repository type metadata.
var (
	DataGuardGroup_Kind             = "DataGuardGroup"
	DataGuardGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataGuardGroup_Kind}.String()
	DataGuardGroup_KindAPIVersion   = DataGuardGroup_Kind + "." + CRDGroupVersion.String()
	DataGuardGroup_GroupVersionKind = CRDGroupVersion.WithKind(DataGuardGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&DataGuardGroup{}, &DataGuardGroupList{})
}
