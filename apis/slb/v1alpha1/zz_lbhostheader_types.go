/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbHostHeaderObservation struct {

	// The ID of the certificate, HTTPS type listener creates this parameter which is not default.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// The time when the host header was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The host header.
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// The host header id.
	HostHeaderID *string `json:"hostHeaderId,omitempty" tf:"host_header_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// The protocol of the listener.
	ListenerProtocol *string `json:"listenerProtocol,omitempty" tf:"listener_protocol,omitempty"`
}

type LbHostHeaderParameters struct {

	// The ID of the certificate, HTTPS type listener creates this parameter which is not default.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// The host header.
	// +kubebuilder:validation:Optional
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// The ID of the listener.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/slb/v1alpha1.LbListener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a LbListener in slb to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a LbListener in slb to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`
}

// LbHostHeaderSpec defines the desired state of LbHostHeader
type LbHostHeaderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbHostHeaderParameters `json:"forProvider"`
}

// LbHostHeaderStatus defines the observed state of LbHostHeader.
type LbHostHeaderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbHostHeaderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbHostHeader is the Schema for the LbHostHeaders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type LbHostHeader struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.hostHeader)",message="hostHeader is a required parameter"
	Spec   LbHostHeaderSpec   `json:"spec"`
	Status LbHostHeaderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbHostHeaderList contains a list of LbHostHeaders
type LbHostHeaderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbHostHeader `json:"items"`
}

// Repository type metadata.
var (
	LbHostHeader_Kind             = "LbHostHeader"
	LbHostHeader_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbHostHeader_Kind}.String()
	LbHostHeader_KindAPIVersion   = LbHostHeader_Kind + "." + CRDGroupVersion.String()
	LbHostHeader_GroupVersionKind = CRDGroupVersion.WithKind(LbHostHeader_Kind)
)

func init() {
	SchemeBuilder.Register(&LbHostHeader{}, &LbHostHeaderList{})
}
