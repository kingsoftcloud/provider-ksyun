/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbAclObservation struct {

	// creation time of the load balancer acl.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP version of the load balancer acl. valid values:'ipv4', 'ipv6'. default is 'ipv4'.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	LoadBalancerACLEntrySet []LoadBalancerACLEntrySetObservation `json:"loadBalancerAclEntrySet,omitempty" tf:"load_balancer_acl_entry_set,omitempty"`

	// ID of the load balancer acl.
	LoadBalancerACLID *string `json:"loadBalancerAclId,omitempty" tf:"load_balancer_acl_id,omitempty"`

	// The name of the load balancer acl.
	LoadBalancerACLName *string `json:"loadBalancerAclName,omitempty" tf:"load_balancer_acl_name,omitempty"`
}

type LbAclParameters struct {

	// IP version of the load balancer acl. valid values:'ipv4', 'ipv6'. default is 'ipv4'.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// +kubebuilder:validation:Optional
	LoadBalancerACLEntrySet []LoadBalancerACLEntrySetParameters `json:"loadBalancerAclEntrySet,omitempty" tf:"load_balancer_acl_entry_set,omitempty"`

	// The name of the load balancer acl.
	// +kubebuilder:validation:Optional
	LoadBalancerACLName *string `json:"loadBalancerAclName,omitempty" tf:"load_balancer_acl_name,omitempty"`
}

type LoadBalancerACLEntrySetObservation struct {

	// The information of the load balancer Acl's cidr block.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// ID of the LB ACL entry.
	LoadBalancerACLEntryID *string `json:"loadBalancerAclEntryId,omitempty" tf:"load_balancer_acl_entry_id,omitempty"`

	// protocol.Valid Values:'ip'.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The action of load balancer Acl rule. Valid Values:'allow', 'deny'. Default is 'allow'.
	RuleAction *string `json:"ruleAction,omitempty" tf:"rule_action,omitempty"`

	// The information of the load balancer Acl's rule priority. value range:[1-32766].
	RuleNumber *float64 `json:"ruleNumber,omitempty" tf:"rule_number,omitempty"`
}

type LoadBalancerACLEntrySetParameters struct {

	// The information of the load balancer Acl's cidr block.
	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// protocol.Valid Values:'ip'.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The action of load balancer Acl rule. Valid Values:'allow', 'deny'. Default is 'allow'.
	// +kubebuilder:validation:Optional
	RuleAction *string `json:"ruleAction,omitempty" tf:"rule_action,omitempty"`

	// The information of the load balancer Acl's rule priority. value range:[1-32766].
	// +kubebuilder:validation:Optional
	RuleNumber *float64 `json:"ruleNumber,omitempty" tf:"rule_number,omitempty"`
}

// LbAclSpec defines the desired state of LbAcl
type LbAclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbAclParameters `json:"forProvider"`
}

// LbAclStatus defines the observed state of LbAcl.
type LbAclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbAcl is the Schema for the LbAcls API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type LbAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbAclSpec   `json:"spec"`
	Status            LbAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbAclList contains a list of LbAcls
type LbAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbAcl `json:"items"`
}

// Repository type metadata.
var (
	LbAcl_Kind             = "LbAcl"
	LbAcl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbAcl_Kind}.String()
	LbAcl_KindAPIVersion   = LbAcl_Kind + "." + CRDGroupVersion.String()
	LbAcl_GroupVersionKind = CRDGroupVersion.WithKind(LbAcl_Kind)
)

func init() {
	SchemeBuilder.Register(&LbAcl{}, &LbAclList{})
}
