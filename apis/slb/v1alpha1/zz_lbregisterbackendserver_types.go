/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbRegisterBackendServerObservation struct {

	// The ID of backend server group.
	BackendServerGroupID *string `json:"backendServerGroupId,omitempty" tf:"backend_server_group_id,omitempty"`

	// The IP of backend server.
	BackendServerIP *string `json:"backendServerIp,omitempty" tf:"backend_server_ip,omitempty"`

	// The port of backend server.Valid Values:1-65535.
	BackendServerPort *float64 `json:"backendServerPort,omitempty" tf:"backend_server_port,omitempty"`

	// The time when the backend service was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The ID of network interface.
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// The IP of real server.
	RealServerIP *float64 `json:"realServerIp,omitempty" tf:"real_server_ip,omitempty"`

	// The port of real server.Valid Values:1-65535.
	RealServerPort *string `json:"realServerPort,omitempty" tf:"real_server_port,omitempty"`

	// The state of real server.Values:'healthy','unhealthy'.
	RealServerState *string `json:"realServerState,omitempty" tf:"real_server_state,omitempty"`

	// The type of real server.Valid Values:'Host'.
	RealServerType *string `json:"realServerType,omitempty" tf:"real_server_type,omitempty"`

	// The registration ID of binding server group.
	RegisterID *string `json:"registerId,omitempty" tf:"register_id,omitempty"`

	// The weight of backend service.Valid Values:0-255.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type LbRegisterBackendServerParameters struct {

	// The ID of backend server group.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/slb/v1alpha1.LbBackendServerGroup
	// +kubebuilder:validation:Optional
	BackendServerGroupID *string `json:"backendServerGroupId,omitempty" tf:"backend_server_group_id,omitempty"`

	// Reference to a LbBackendServerGroup in slb to populate backendServerGroupId.
	// +kubebuilder:validation:Optional
	BackendServerGroupIDRef *v1.Reference `json:"backendServerGroupIdRef,omitempty" tf:"-"`

	// Selector for a LbBackendServerGroup in slb to populate backendServerGroupId.
	// +kubebuilder:validation:Optional
	BackendServerGroupIDSelector *v1.Selector `json:"backendServerGroupIdSelector,omitempty" tf:"-"`

	// The IP of backend server.
	// +kubebuilder:validation:Optional
	BackendServerIP *string `json:"backendServerIp,omitempty" tf:"backend_server_ip,omitempty"`

	// The port of backend server.Valid Values:1-65535.
	// +kubebuilder:validation:Optional
	BackendServerPort *float64 `json:"backendServerPort,omitempty" tf:"backend_server_port,omitempty"`

	// The weight of backend service.Valid Values:0-255.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// LbRegisterBackendServerSpec defines the desired state of LbRegisterBackendServer
type LbRegisterBackendServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbRegisterBackendServerParameters `json:"forProvider"`
}

// LbRegisterBackendServerStatus defines the observed state of LbRegisterBackendServer.
type LbRegisterBackendServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbRegisterBackendServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbRegisterBackendServer is the Schema for the LbRegisterBackendServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type LbRegisterBackendServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backendServerIp)",message="backendServerIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.backendServerPort)",message="backendServerPort is a required parameter"
	Spec   LbRegisterBackendServerSpec   `json:"spec"`
	Status LbRegisterBackendServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbRegisterBackendServerList contains a list of LbRegisterBackendServers
type LbRegisterBackendServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbRegisterBackendServer `json:"items"`
}

// Repository type metadata.
var (
	LbRegisterBackendServer_Kind             = "LbRegisterBackendServer"
	LbRegisterBackendServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbRegisterBackendServer_Kind}.String()
	LbRegisterBackendServer_KindAPIVersion   = LbRegisterBackendServer_Kind + "." + CRDGroupVersion.String()
	LbRegisterBackendServer_GroupVersionKind = CRDGroupVersion.WithKind(LbRegisterBackendServer_Kind)
)

func init() {
	SchemeBuilder.Register(&LbRegisterBackendServer{}, &LbRegisterBackendServerList{})
}
