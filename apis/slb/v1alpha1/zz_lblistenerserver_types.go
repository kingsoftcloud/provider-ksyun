/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbListenerServerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The id of the listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Forwarding mode of listener.
	ListenerMethod *string `json:"listenerMethod,omitempty" tf:"listener_method,omitempty"`

	// whether real server is master of salve. when listener method is MasterSlave, this field is supported.
	MasterSlaveType *string `json:"masterSlaveType,omitempty" tf:"master_slave_type,omitempty"`

	// The IP of real server.
	RealServerIP *string `json:"realServerIp,omitempty" tf:"real_server_ip,omitempty"`

	// The port of real server.Valid Values:1-65535.
	RealServerPort *float64 `json:"realServerPort,omitempty" tf:"real_server_port,omitempty"`

	// State of the real server.
	RealServerState *string `json:"realServerState,omitempty" tf:"real_server_state,omitempty"`

	// The type of real server.Valid Values:'host', 'DirectConnectGateway', 'VpnTunnel'.
	RealServerType *string `json:"realServerType,omitempty" tf:"real_server_type,omitempty"`

	// The registration ID of real server.
	RegisterID *string `json:"registerId,omitempty" tf:"register_id,omitempty"`

	// The weight of backend service.Valid Values:1-255.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type LbListenerServerParameters struct {

	// The ID of instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The id of the listener.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/slb/v1alpha1.LbListener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a LbListener in slb to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a LbListener in slb to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// whether real server is master of salve. when listener method is MasterSlave, this field is supported.
	// +kubebuilder:validation:Optional
	MasterSlaveType *string `json:"masterSlaveType,omitempty" tf:"master_slave_type,omitempty"`

	// The IP of real server.
	// +kubebuilder:validation:Optional
	RealServerIP *string `json:"realServerIp,omitempty" tf:"real_server_ip,omitempty"`

	// The port of real server.Valid Values:1-65535.
	// +kubebuilder:validation:Optional
	RealServerPort *float64 `json:"realServerPort,omitempty" tf:"real_server_port,omitempty"`

	// The type of real server.Valid Values:'host', 'DirectConnectGateway', 'VpnTunnel'.
	// +kubebuilder:validation:Optional
	RealServerType *string `json:"realServerType,omitempty" tf:"real_server_type,omitempty"`

	// The weight of backend service.Valid Values:1-255.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// LbListenerServerSpec defines the desired state of LbListenerServer
type LbListenerServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbListenerServerParameters `json:"forProvider"`
}

// LbListenerServerStatus defines the observed state of LbListenerServer.
type LbListenerServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbListenerServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbListenerServer is the Schema for the LbListenerServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type LbListenerServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.realServerIp)",message="realServerIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.realServerPort)",message="realServerPort is a required parameter"
	Spec   LbListenerServerSpec   `json:"spec"`
	Status LbListenerServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbListenerServerList contains a list of LbListenerServers
type LbListenerServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbListenerServer `json:"items"`
}

// Repository type metadata.
var (
	LbListenerServer_Kind             = "LbListenerServer"
	LbListenerServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbListenerServer_Kind}.String()
	LbListenerServer_KindAPIVersion   = LbListenerServer_Kind + "." + CRDGroupVersion.String()
	LbListenerServer_GroupVersionKind = CRDGroupVersion.WithKind(LbListenerServer_Kind)
)

func init() {
	SchemeBuilder.Register(&LbListenerServer{}, &LbListenerServerList{})
}
