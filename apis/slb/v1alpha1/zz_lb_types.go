/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LBObservation struct {

	// Default is `false`, Setting the value to `true` to enable the service.
	AccessLogsEnabled *bool `json:"accessLogsEnabled,omitempty" tf:"access_logs_enabled,omitempty"`

	// Bucket for storing access logs.
	AccessLogsS3Bucket *string `json:"accessLogsS3Bucket,omitempty" tf:"access_logs_s3_bucket,omitempty"`

	// The time of creation for load balancer.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP version, valid values: 'all', 'ipv4', 'ipv6'.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// whether it is a waf LB or not.
	IsWaf *bool `json:"isWaf,omitempty" tf:"is_waf,omitempty"`

	// ID of the LB.
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// The name of the load balancer.
	LoadBalancerName *string `json:"loadBalancerName,omitempty" tf:"load_balancer_name,omitempty"`

	// The Load Balancers state.Valid Values:'start', 'stop'.
	LoadBalancerState *string `json:"loadBalancerState,omitempty" tf:"load_balancer_state,omitempty"`

	// The internal Load Balancers can set an private ip address in Reserve Subnet.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// ID of the project.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The IP address of Public IP. It is `""` if `internal` is `true`.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// associate or disassociate.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The id of the subnet.only Internal type is Required.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// the tags of the resource.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of load balancer.Valid Values:'public', 'internal'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The ID of the VPC linked to the Load Balancers.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type LBParameters struct {

	// Default is `false`, Setting the value to `true` to enable the service.
	// +kubebuilder:validation:Optional
	AccessLogsEnabled *bool `json:"accessLogsEnabled,omitempty" tf:"access_logs_enabled,omitempty"`

	// Bucket for storing access logs.
	// +kubebuilder:validation:Optional
	AccessLogsS3Bucket *string `json:"accessLogsS3Bucket,omitempty" tf:"access_logs_s3_bucket,omitempty"`

	// IP version, valid values: 'all', 'ipv4', 'ipv6'.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The name of the load balancer.
	// +kubebuilder:validation:Optional
	LoadBalancerName *string `json:"loadBalancerName,omitempty" tf:"load_balancer_name,omitempty"`

	// The Load Balancers state.Valid Values:'start', 'stop'.
	// +kubebuilder:validation:Optional
	LoadBalancerState *string `json:"loadBalancerState,omitempty" tf:"load_balancer_state,omitempty"`

	// The internal Load Balancers can set an private ip address in Reserve Subnet.
	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// ID of the project.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The id of the subnet.only Internal type is Required.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// the tags of the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of load balancer.Valid Values:'public', 'internal'.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The ID of the VPC linked to the Load Balancers.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// LBSpec defines the desired state of LB
type LBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LBParameters `json:"forProvider"`
}

// LBStatus defines the observed state of LB.
type LBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LB is the Schema for the LBs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type LB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LBSpec   `json:"spec"`
	Status            LBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LBList contains a list of LBs
type LBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LB `json:"items"`
}

// Repository type metadata.
var (
	LB_Kind             = "LB"
	LB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LB_Kind}.String()
	LB_KindAPIVersion   = LB_Kind + "." + CRDGroupVersion.String()
	LB_GroupVersionKind = CRDGroupVersion.WithKind(LB_Kind)
)

func init() {
	SchemeBuilder.Register(&LB{}, &LBList{})
}
