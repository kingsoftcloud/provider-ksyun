/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HealthcheckObservation struct {

	// ID of the health check.
	HealthCheckID *string `json:"healthCheckId,omitempty" tf:"health_check_id,omitempty"`

	// Status maintained by health examination.Valid Values:'start', 'stop'.
	HealthCheckState *string `json:"healthCheckState,omitempty" tf:"health_check_state,omitempty"`

	// Health threshold.Valid Values:1-10. Default is 5.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// The service host name of the health check, which is available only for the HTTP or HTTPS health check.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Interval of health examination.Valid Values:1-3600. Default is 5.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Whether the host name is default or not.
	IsDefaultHostName *bool `json:"isDefaultHostName,omitempty" tf:"is_default_host_name,omitempty"`

	// The id of the listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// protocol of the listener.
	ListenerProtocol *string `json:"listenerProtocol,omitempty" tf:"listener_protocol,omitempty"`

	// Health check timeout.Valid Values:1-3600. Default is 4.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Link to HTTP type listener health check.
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`

	// Unhealthy threshold.Valid Values:1-10. Default is 4.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type HealthcheckParameters struct {

	// Status maintained by health examination.Valid Values:'start', 'stop'.
	// +kubebuilder:validation:Optional
	HealthCheckState *string `json:"healthCheckState,omitempty" tf:"health_check_state,omitempty"`

	// Health threshold.Valid Values:1-10. Default is 5.
	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// The service host name of the health check, which is available only for the HTTP or HTTPS health check.
	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Interval of health examination.Valid Values:1-3600. Default is 5.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Whether the host name is default or not.
	// +kubebuilder:validation:Optional
	IsDefaultHostName *bool `json:"isDefaultHostName,omitempty" tf:"is_default_host_name,omitempty"`

	// The id of the listener.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/slb/v1alpha1.LbListener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a LbListener in slb to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a LbListener in slb to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Health check timeout.Valid Values:1-3600. Default is 4.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Link to HTTP type listener health check.
	// +kubebuilder:validation:Optional
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`

	// Unhealthy threshold.Valid Values:1-10. Default is 4.
	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

// HealthcheckSpec defines the desired state of Healthcheck
type HealthcheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HealthcheckParameters `json:"forProvider"`
}

// HealthcheckStatus defines the observed state of Healthcheck.
type HealthcheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HealthcheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Healthcheck is the Schema for the Healthchecks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type Healthcheck struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HealthcheckSpec   `json:"spec"`
	Status            HealthcheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcheckList contains a list of Healthchecks
type HealthcheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Healthcheck `json:"items"`
}

// Repository type metadata.
var (
	Healthcheck_Kind             = "Healthcheck"
	Healthcheck_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Healthcheck_Kind}.String()
	Healthcheck_KindAPIVersion   = Healthcheck_Kind + "." + CRDGroupVersion.String()
	Healthcheck_GroupVersionKind = CRDGroupVersion.WithKind(Healthcheck_Kind)
)

func init() {
	SchemeBuilder.Register(&Healthcheck{}, &HealthcheckList{})
}
