/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBObservation struct {

	// The name of the ALB.
	ALBName *string `json:"albName,omitempty" tf:"alb_name,omitempty"`

	// The type of the ALB, valid values:'public', 'internal'.
	ALBType *string `json:"albType,omitempty" tf:"alb_type,omitempty"`

	// The version of the ALB. valid values:'standard', 'advanced'.
	ALBVersion *string `json:"albVersion,omitempty" tf:"alb_version,omitempty"`

	// The charge type, valid values: 'PrePaidByHourUsage'.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The creation time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Whether log is enabled or not. Specific `klog_info` field when `enabled_log` is true.
	EnabledLog *bool `json:"enabledLog,omitempty" tf:"enabled_log,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP version, 'ipv4' or 'ipv6'.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	KlogInfo []KlogInfoObservation `json:"klogInfo,omitempty" tf:"klog_info,omitempty"`

	// The ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The public IP address.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// The state of the ALB, Valid Values:'start', 'stop'.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The status of the ALB.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The ID of the VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ALBParameters struct {

	// The name of the ALB.
	// +kubebuilder:validation:Optional
	ALBName *string `json:"albName,omitempty" tf:"alb_name,omitempty"`

	// The type of the ALB, valid values:'public', 'internal'.
	// +kubebuilder:validation:Optional
	ALBType *string `json:"albType,omitempty" tf:"alb_type,omitempty"`

	// The version of the ALB. valid values:'standard', 'advanced'.
	// +kubebuilder:validation:Optional
	ALBVersion *string `json:"albVersion,omitempty" tf:"alb_version,omitempty"`

	// The charge type, valid values: 'PrePaidByHourUsage'.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Whether log is enabled or not. Specific `klog_info` field when `enabled_log` is true.
	// +kubebuilder:validation:Optional
	EnabledLog *bool `json:"enabledLog,omitempty" tf:"enabled_log,omitempty"`

	// IP version, 'ipv4' or 'ipv6'.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// +kubebuilder:validation:Optional
	KlogInfo []KlogInfoParameters `json:"klogInfo,omitempty" tf:"klog_info,omitempty"`

	// The ID of the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The state of the ALB, Valid Values:'start', 'stop'.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The ID of the VPC.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type KlogInfoObservation struct {

	// account id.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// log pool name.
	LogPoolName *string `json:"logPoolName,omitempty" tf:"log_pool_name,omitempty"`

	// log project name.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`
}

type KlogInfoParameters struct {

	// log pool name.
	// +kubebuilder:validation:Optional
	LogPoolName *string `json:"logPoolName,omitempty" tf:"log_pool_name,omitempty"`

	// log project name.
	// +kubebuilder:validation:Optional
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`
}

// ALBSpec defines the desired state of ALB
type ALBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ALBParameters `json:"forProvider"`
}

// ALBStatus defines the observed state of ALB.
type ALBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ALBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ALB is the Schema for the ALBs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type ALB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.albType)",message="albType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.albVersion)",message="albVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.chargeType)",message="chargeType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vpcId)",message="vpcId is a required parameter"
	Spec   ALBSpec   `json:"spec"`
	Status ALBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ALBList contains a list of ALBs
type ALBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ALB `json:"items"`
}

// Repository type metadata.
var (
	ALB_Kind             = "ALB"
	ALB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ALB_Kind}.String()
	ALB_KindAPIVersion   = ALB_Kind + "." + CRDGroupVersion.String()
	ALB_GroupVersionKind = CRDGroupVersion.WithKind(ALB_Kind)
)

func init() {
	SchemeBuilder.Register(&ALB{}, &ALBList{})
}
