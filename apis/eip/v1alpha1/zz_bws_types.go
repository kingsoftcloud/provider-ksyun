/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BwsObservation struct {

	// bandwidth value, value range: [1, 15000].
	BandWidth *float64 `json:"bandWidth,omitempty" tf:"band_width,omitempty"`

	// name of the BWS.
	BandWidthShareName *string `json:"bandWidthShareName,omitempty" tf:"band_width_share_name,omitempty"`

	// The charge type of the BWS.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the line.
	LineID *string `json:"lineId,omitempty" tf:"line_id,omitempty"`

	// ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type BwsParameters struct {

	// bandwidth value, value range: [1, 15000].
	// +kubebuilder:validation:Optional
	BandWidth *float64 `json:"bandWidth,omitempty" tf:"band_width,omitempty"`

	// name of the BWS.
	// +kubebuilder:validation:Optional
	BandWidthShareName *string `json:"bandWidthShareName,omitempty" tf:"band_width_share_name,omitempty"`

	// The charge type of the BWS.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The id of the line.
	// +kubebuilder:validation:Optional
	LineID *string `json:"lineId,omitempty" tf:"line_id,omitempty"`

	// ID of the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// BwsSpec defines the desired state of Bws
type BwsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BwsParameters `json:"forProvider"`
}

// BwsStatus defines the observed state of Bws.
type BwsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BwsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Bws is the Schema for the Bwss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type Bws struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bandWidth)",message="bandWidth is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.chargeType)",message="chargeType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.lineId)",message="lineId is a required parameter"
	Spec   BwsSpec   `json:"spec"`
	Status BwsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BwsList contains a list of Bwss
type BwsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bws `json:"items"`
}

// Repository type metadata.
var (
	Bws_Kind             = "Bws"
	Bws_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bws_Kind}.String()
	Bws_KindAPIVersion   = Bws_Kind + "." + CRDGroupVersion.String()
	Bws_GroupVersionKind = CRDGroupVersion.WithKind(Bws_Kind)
)

func init() {
	SchemeBuilder.Register(&Bws{}, &BwsList{})
}
