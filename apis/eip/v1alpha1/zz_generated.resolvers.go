/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this BwsAssociate.
func (mg *BwsAssociate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AllocationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AllocationIDRef,
		Selector:     mg.Spec.ForProvider.AllocationIDSelector,
		To: reference.To{
			List:    &EIPList{},
			Managed: &EIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AllocationID")
	}
	mg.Spec.ForProvider.AllocationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AllocationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BandWidthShareID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.BandWidthShareIDRef,
		Selector:     mg.Spec.ForProvider.BandWidthShareIDSelector,
		To: reference.To{
			List:    &BwsList{},
			Managed: &Bws{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BandWidthShareID")
	}
	mg.Spec.ForProvider.BandWidthShareID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BandWidthShareIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EipAssociate.
func (mg *EipAssociate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AllocationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AllocationIDRef,
		Selector:     mg.Spec.ForProvider.AllocationIDSelector,
		To: reference.To{
			List:    &EIPList{},
			Managed: &EIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AllocationID")
	}
	mg.Spec.ForProvider.AllocationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AllocationIDRef = rsp.ResolvedReference

	return nil
}
