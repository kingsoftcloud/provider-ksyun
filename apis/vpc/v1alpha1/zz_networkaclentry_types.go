/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkAclEntryObservation struct {

	// The cidr_block of the network acl entry.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The description of the network acl entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the network acl entry. Valid Values: 'in','out'.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The icmp_code of the network acl entry.If protocol is icmp, Required.
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The icmp_type of the network acl entry.If protocol is icmp, Required.
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// ID of the network acl entry.
	NetworkACLEntryID *string `json:"networkAclEntryId,omitempty" tf:"network_acl_entry_id,omitempty"`

	// The id of the network acl.
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// The port_range_from of the network acl entry.If protocol is tcp or udp,Required.
	PortRangeFrom *float64 `json:"portRangeFrom,omitempty" tf:"port_range_from,omitempty"`

	// The port_range_to of the network acl entry.If protocol is tcp or udp,Required.
	PortRangeTo *float64 `json:"portRangeTo,omitempty" tf:"port_range_to,omitempty"`

	// The protocol of the network acl entry.Valid Values: 'ip','icmp','tcp','udp'.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The rule_action of the network acl entry.Valid Values: 'allow','deny'.
	RuleAction *string `json:"ruleAction,omitempty" tf:"rule_action,omitempty"`

	// The rule_number of the network acl entry. value range:[1,32766].
	RuleNumber *float64 `json:"ruleNumber,omitempty" tf:"rule_number,omitempty"`
}

type NetworkAclEntryParameters struct {

	// The cidr_block of the network acl entry.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The description of the network acl entry.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the network acl entry. Valid Values: 'in','out'.
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// The icmp_code of the network acl entry.If protocol is icmp, Required.
	// +kubebuilder:validation:Optional
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The icmp_type of the network acl entry.If protocol is icmp, Required.
	// +kubebuilder:validation:Optional
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// The id of the network acl.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.NetworkAcl
	// +kubebuilder:validation:Optional
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// Reference to a NetworkAcl in vpc to populate networkAclId.
	// +kubebuilder:validation:Optional
	NetworkACLIDRef *v1.Reference `json:"networkAclIdRef,omitempty" tf:"-"`

	// Selector for a NetworkAcl in vpc to populate networkAclId.
	// +kubebuilder:validation:Optional
	NetworkACLIDSelector *v1.Selector `json:"networkAclIdSelector,omitempty" tf:"-"`

	// The port_range_from of the network acl entry.If protocol is tcp or udp,Required.
	// +kubebuilder:validation:Optional
	PortRangeFrom *float64 `json:"portRangeFrom,omitempty" tf:"port_range_from,omitempty"`

	// The port_range_to of the network acl entry.If protocol is tcp or udp,Required.
	// +kubebuilder:validation:Optional
	PortRangeTo *float64 `json:"portRangeTo,omitempty" tf:"port_range_to,omitempty"`

	// The protocol of the network acl entry.Valid Values: 'ip','icmp','tcp','udp'.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The rule_action of the network acl entry.Valid Values: 'allow','deny'.
	// +kubebuilder:validation:Optional
	RuleAction *string `json:"ruleAction,omitempty" tf:"rule_action,omitempty"`

	// The rule_number of the network acl entry. value range:[1,32766].
	// +kubebuilder:validation:Optional
	RuleNumber *float64 `json:"ruleNumber,omitempty" tf:"rule_number,omitempty"`
}

// NetworkAclEntrySpec defines the desired state of NetworkAclEntry
type NetworkAclEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkAclEntryParameters `json:"forProvider"`
}

// NetworkAclEntryStatus defines the observed state of NetworkAclEntry.
type NetworkAclEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkAclEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkAclEntry is the Schema for the NetworkAclEntrys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type NetworkAclEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cidrBlock)",message="cidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.direction)",message="direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.protocol)",message="protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ruleAction)",message="ruleAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ruleNumber)",message="ruleNumber is a required parameter"
	Spec   NetworkAclEntrySpec   `json:"spec"`
	Status NetworkAclEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkAclEntryList contains a list of NetworkAclEntrys
type NetworkAclEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkAclEntry `json:"items"`
}

// Repository type metadata.
var (
	NetworkAclEntry_Kind             = "NetworkAclEntry"
	NetworkAclEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkAclEntry_Kind}.String()
	NetworkAclEntry_KindAPIVersion   = NetworkAclEntry_Kind + "." + CRDGroupVersion.String()
	NetworkAclEntry_GroupVersionKind = CRDGroupVersion.WithKind(NetworkAclEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkAclEntry{}, &NetworkAclEntryList{})
}
