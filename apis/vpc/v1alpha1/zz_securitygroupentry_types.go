/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityGroupEntryObservation struct {

	// The cidr block of security group rule.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The description of the entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the entry, valid values:'in', 'out'.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ICMP code.The required if protocol type is 'icmp'.
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// ICMP type.The required if protocol type is 'icmp'.
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// Port rule start port for TCP or UDP protocol.The required if protocol type is 'tcp' or 'udp'.
	PortRangeFrom *float64 `json:"portRangeFrom,omitempty" tf:"port_range_from,omitempty"`

	// Port rule end port for TCP or UDP protocol.The required if protocol type is 'tcp' or 'udp'.
	PortRangeTo *float64 `json:"portRangeTo,omitempty" tf:"port_range_to,omitempty"`

	// The protocol of the entry, valid values: 'ip', 'tcp', 'udp', 'icmp'.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The ID of the entry.
	SecurityGroupEntryID *string `json:"securityGroupEntryId,omitempty" tf:"security_group_entry_id,omitempty"`

	// The ID of the security group.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecurityGroupEntryParameters struct {

	// The cidr block of security group rule.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The description of the entry.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the entry, valid values:'in', 'out'.
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// ICMP code.The required if protocol type is 'icmp'.
	// +kubebuilder:validation:Optional
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// ICMP type.The required if protocol type is 'icmp'.
	// +kubebuilder:validation:Optional
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// Port rule start port for TCP or UDP protocol.The required if protocol type is 'tcp' or 'udp'.
	// +kubebuilder:validation:Optional
	PortRangeFrom *float64 `json:"portRangeFrom,omitempty" tf:"port_range_from,omitempty"`

	// Port rule end port for TCP or UDP protocol.The required if protocol type is 'tcp' or 'udp'.
	// +kubebuilder:validation:Optional
	PortRangeTo *float64 `json:"portRangeTo,omitempty" tf:"port_range_to,omitempty"`

	// The protocol of the entry, valid values: 'ip', 'tcp', 'udp', 'icmp'.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The ID of the security group.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup in vpc to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`
}

// SecurityGroupEntrySpec defines the desired state of SecurityGroupEntry
type SecurityGroupEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityGroupEntryParameters `json:"forProvider"`
}

// SecurityGroupEntryStatus defines the observed state of SecurityGroupEntry.
type SecurityGroupEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityGroupEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupEntry is the Schema for the SecurityGroupEntrys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type SecurityGroupEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cidrBlock)",message="cidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.direction)",message="direction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.protocol)",message="protocol is a required parameter"
	Spec   SecurityGroupEntrySpec   `json:"spec"`
	Status SecurityGroupEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupEntryList contains a list of SecurityGroupEntrys
type SecurityGroupEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroupEntry `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroupEntry_Kind             = "SecurityGroupEntry"
	SecurityGroupEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityGroupEntry_Kind}.String()
	SecurityGroupEntry_KindAPIVersion   = SecurityGroupEntry_Kind + "." + CRDGroupVersion.String()
	SecurityGroupEntry_GroupVersionKind = CRDGroupVersion.WithKind(SecurityGroupEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityGroupEntry{}, &SecurityGroupEntryList{})
}
