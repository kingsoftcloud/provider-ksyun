/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCIPv6CidrBlockAssociationSetObservation struct {
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`
}

type VPCIPv6CidrBlockAssociationSetParameters struct {
}

type VPCObservation struct {

	// The CIDR blocks of VPC.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The time of creation for VPC.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An Ipv6 association list of this vpc.
	IPv6CidrBlockAssociationSet []VPCIPv6CidrBlockAssociationSetObservation `json:"ipv6CidrBlockAssociationSet,omitempty" tf:"ipv6_cidr_block_association_set,omitempty"`

	// Whether the VPC is default or not.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// whether support IPV6 CIDR blocks. <br> NOTES: providing a part of regions now.
	ProvidedIPv6CidrBlock *bool `json:"providedIpv6CidrBlock,omitempty" tf:"provided_ipv6_cidr_block,omitempty"`

	// The name of the vpc.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type VPCParameters struct {

	// The CIDR blocks of VPC.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Whether the VPC is default or not.
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// whether support IPV6 CIDR blocks. <br> NOTES: providing a part of regions now.
	// +kubebuilder:validation:Optional
	ProvidedIPv6CidrBlock *bool `json:"providedIpv6CidrBlock,omitempty" tf:"provided_ipv6_cidr_block,omitempty"`

	// The name of the vpc.
	// +kubebuilder:validation:Optional
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

// VPCSpec defines the desired state of VPC
type VPCSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCParameters `json:"forProvider"`
}

// VPCStatus defines the observed state of VPC.
type VPCStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPC is the Schema for the VPCs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type VPC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCSpec   `json:"spec"`
	Status            VPCStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCList contains a list of VPCs
type VPCList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPC `json:"items"`
}

// Repository type metadata.
var (
	VPC_Kind             = "VPC"
	VPC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPC_Kind}.String()
	VPC_KindAPIVersion   = VPC_Kind + "." + CRDGroupVersion.String()
	VPC_GroupVersionKind = CRDGroupVersion.WithKind(VPC_Kind)
)

func init() {
	SchemeBuilder.Register(&VPC{}, &VPCList{})
}
