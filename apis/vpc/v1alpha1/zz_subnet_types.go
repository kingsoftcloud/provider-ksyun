/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv6CidrBlockAssociationSetObservation struct {
	IPv6CidrBlock *string `json:"ipv6CidrBlock,omitempty" tf:"ipv6_cidr_block,omitempty"`
}

type IPv6CidrBlockAssociationSetParameters struct {
}

type SubnetObservation struct {

	// The name of the availability zone.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The name of the availability zone.
	AvailabilityZoneName *string `json:"availabilityZoneName,omitempty" tf:"availability_zone_name,omitempty"`

	// number of available IPs.
	AvailableIPNumber *string `json:"availableIpNumber,omitempty" tf:"available_ip_number,omitempty"`

	// The CIDR block assigned to the subnet.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// creation time of the subnet.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// DHCP start IP.
	DHCPIPFrom *string `json:"dhcpIpFrom,omitempty" tf:"dhcp_ip_from,omitempty"`

	// DHCP end IP.
	DHCPIPTo *string `json:"dhcpIpTo,omitempty" tf:"dhcp_ip_to,omitempty"`

	// The dns of the subnet.
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// The dns of the subnet.
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// The IP of gateway.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An Ipv6 association list of this subnet.
	IPv6CidrBlockAssociationSet []IPv6CidrBlockAssociationSetObservation `json:"ipv6CidrBlockAssociationSet,omitempty" tf:"ipv6_cidr_block_association_set,omitempty"`

	// The id of the NAT that the desired Subnet associated to.
	NATID *string `json:"natId,omitempty" tf:"nat_id,omitempty"`

	// The id of the ACL that the desired Subnet associated to.
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// whether support IPV6 CIDR blocks. <br> NOTES: providing a part of regions now.
	ProvidedIPv6CidrBlock *bool `json:"providedIpv6CidrBlock,omitempty" tf:"provided_ipv6_cidr_block,omitempty"`

	// ID of the subnet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The name of the subnet.
	SubnetName *string `json:"subnetName,omitempty" tf:"subnet_name,omitempty"`

	// The type of subnet. Valid Values:'Reserve', 'Normal', 'Physical'.
	SubnetType *string `json:"subnetType,omitempty" tf:"subnet_type,omitempty"`

	// The id of the vpc.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type SubnetParameters struct {

	// The name of the availability zone.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The CIDR block assigned to the subnet.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// DHCP start IP.
	// +kubebuilder:validation:Optional
	DHCPIPFrom *string `json:"dhcpIpFrom,omitempty" tf:"dhcp_ip_from,omitempty"`

	// DHCP end IP.
	// +kubebuilder:validation:Optional
	DHCPIPTo *string `json:"dhcpIpTo,omitempty" tf:"dhcp_ip_to,omitempty"`

	// The dns of the subnet.
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// The dns of the subnet.
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// The IP of gateway.
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// whether support IPV6 CIDR blocks. <br> NOTES: providing a part of regions now.
	// +kubebuilder:validation:Optional
	ProvidedIPv6CidrBlock *bool `json:"providedIpv6CidrBlock,omitempty" tf:"provided_ipv6_cidr_block,omitempty"`

	// The name of the subnet.
	// +kubebuilder:validation:Optional
	SubnetName *string `json:"subnetName,omitempty" tf:"subnet_name,omitempty"`

	// The type of subnet. Valid Values:'Reserve', 'Normal', 'Physical'.
	// +kubebuilder:validation:Optional
	SubnetType *string `json:"subnetType,omitempty" tf:"subnet_type,omitempty"`

	// The id of the vpc.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// SubnetSpec defines the desired state of Subnet
type SubnetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetParameters `json:"forProvider"`
}

// SubnetStatus defines the observed state of Subnet.
type SubnetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Subnet is the Schema for the Subnets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type Subnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cidrBlock)",message="cidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.subnetType)",message="subnetType is a required parameter"
	Spec   SubnetSpec   `json:"spec"`
	Status SubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetList contains a list of Subnets
type SubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subnet `json:"items"`
}

// Repository type metadata.
var (
	Subnet_Kind             = "Subnet"
	Subnet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subnet_Kind}.String()
	Subnet_KindAPIVersion   = Subnet_Kind + "." + CRDGroupVersion.String()
	Subnet_GroupVersionKind = CRDGroupVersion.WithKind(Subnet_Kind)
)

func init() {
	SchemeBuilder.Register(&Subnet{}, &SubnetList{})
}
