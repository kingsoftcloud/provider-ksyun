/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NextHopSetObservation struct {
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	GatewayName *string `json:"gatewayName,omitempty" tf:"gateway_name,omitempty"`
}

type NextHopSetParameters struct {
}

type RouteObservation struct {

	// The time of creation of the route.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The CIDR block assigned to the route.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// The id of the DirectConnectGateway, If route_type is DirectConnect, This Field is Required.
	DirectConnectGatewayID *string `json:"directConnectGatewayId,omitempty" tf:"direct_connect_gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the VM, If route_type is Host, This Field is Required.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// A list of next hop.
	NextHopSet []NextHopSetObservation `json:"nextHopSet,omitempty" tf:"next_hop_set,omitempty"`

	// The type of route.Valid Values:'InternetGateway', 'Tunnel', 'Host', 'Peering', 'DirectConnect', 'Vpn'.
	RouteType *string `json:"routeType,omitempty" tf:"route_type,omitempty"`

	// The id of the tunnel If route_type is Tunnel, This Field is Required.
	TunnelID *string `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`

	// The id of the vpc.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// The id of the Peering, If route_type is Peering, This Field is Required.
	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionId,omitempty" tf:"vpc_peering_connection_id,omitempty"`

	// The id of the Vpn, If route_type is Vpn, This Field is Required.
	VPNTunnelID *string `json:"vpnTunnelId,omitempty" tf:"vpn_tunnel_id,omitempty"`
}

type RouteParameters struct {

	// The CIDR block assigned to the route.
	// +kubebuilder:validation:Optional
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// The id of the DirectConnectGateway, If route_type is DirectConnect, This Field is Required.
	// +kubebuilder:validation:Optional
	DirectConnectGatewayID *string `json:"directConnectGatewayId,omitempty" tf:"direct_connect_gateway_id,omitempty"`

	// The id of the VM, If route_type is Host, This Field is Required.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The type of route.Valid Values:'InternetGateway', 'Tunnel', 'Host', 'Peering', 'DirectConnect', 'Vpn'.
	// +kubebuilder:validation:Optional
	RouteType *string `json:"routeType,omitempty" tf:"route_type,omitempty"`

	// The id of the tunnel If route_type is Tunnel, This Field is Required.
	// +kubebuilder:validation:Optional
	TunnelID *string `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`

	// The id of the vpc.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// The id of the Peering, If route_type is Peering, This Field is Required.
	// +kubebuilder:validation:Optional
	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionId,omitempty" tf:"vpc_peering_connection_id,omitempty"`

	// The id of the Vpn, If route_type is Vpn, This Field is Required.
	// +kubebuilder:validation:Optional
	VPNTunnelID *string `json:"vpnTunnelId,omitempty" tf:"vpn_tunnel_id,omitempty"`
}

// RouteSpec defines the desired state of Route
type RouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteParameters `json:"forProvider"`
}

// RouteStatus defines the observed state of Route.
type RouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route is the Schema for the Routes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type Route struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.destinationCidrBlock)",message="destinationCidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.routeType)",message="routeType is a required parameter"
	Spec   RouteSpec   `json:"spec"`
	Status RouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteList contains a list of Routes
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route `json:"items"`
}

// Repository type metadata.
var (
	Route_Kind             = "Route"
	Route_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Route_Kind}.String()
	Route_KindAPIVersion   = Route_Kind + "." + CRDGroupVersion.String()
	Route_GroupVersionKind = CRDGroupVersion.WithKind(Route_Kind)
)

func init() {
	SchemeBuilder.Register(&Route{}, &RouteList{})
}
