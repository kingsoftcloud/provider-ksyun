/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkAclAssociateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the network acl.
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// The id of the Subnet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type NetworkAclAssociateParameters struct {

	// The id of the network acl.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.NetworkAcl
	// +kubebuilder:validation:Optional
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// Reference to a NetworkAcl in vpc to populate networkAclId.
	// +kubebuilder:validation:Optional
	NetworkACLIDRef *v1.Reference `json:"networkAclIdRef,omitempty" tf:"-"`

	// Selector for a NetworkAcl in vpc to populate networkAclId.
	// +kubebuilder:validation:Optional
	NetworkACLIDSelector *v1.Selector `json:"networkAclIdSelector,omitempty" tf:"-"`

	// The id of the Subnet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

// NetworkAclAssociateSpec defines the desired state of NetworkAclAssociate
type NetworkAclAssociateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkAclAssociateParameters `json:"forProvider"`
}

// NetworkAclAssociateStatus defines the observed state of NetworkAclAssociate.
type NetworkAclAssociateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkAclAssociateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkAclAssociate is the Schema for the NetworkAclAssociates API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type NetworkAclAssociate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.subnetId)",message="subnetId is a required parameter"
	Spec   NetworkAclAssociateSpec   `json:"spec"`
	Status NetworkAclAssociateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkAclAssociateList contains a list of NetworkAclAssociates
type NetworkAclAssociateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkAclAssociate `json:"items"`
}

// Repository type metadata.
var (
	NetworkAclAssociate_Kind             = "NetworkAclAssociate"
	NetworkAclAssociate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkAclAssociate_Kind}.String()
	NetworkAclAssociate_KindAPIVersion   = NetworkAclAssociate_Kind + "." + CRDGroupVersion.String()
	NetworkAclAssociate_GroupVersionKind = CRDGroupVersion.WithKind(NetworkAclAssociate_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkAclAssociate{}, &NetworkAclAssociateList{})
}
