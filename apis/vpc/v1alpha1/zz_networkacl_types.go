/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkACLEntriesObservation struct {

	// The cidr_block of the network acl entry.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// The description of the network acl entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the network acl entry. Valid Values: 'in','out'.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// The icmp_code of the network acl entry.If protocol is icmp, Required.
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The icmp_type of the network acl entry.If protocol is icmp, Required.
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// ID of the network acl entry.
	NetworkACLEntryID *string `json:"networkAclEntryId,omitempty" tf:"network_acl_entry_id,omitempty"`

	// The port_range_from of the network acl entry.If protocol is tcp or udp,Required.
	PortRangeFrom *float64 `json:"portRangeFrom,omitempty" tf:"port_range_from,omitempty"`

	// The port_range_to of the network acl entry.If protocol is tcp or udp,Required.
	PortRangeTo *float64 `json:"portRangeTo,omitempty" tf:"port_range_to,omitempty"`

	// The protocol of the network acl entry.Valid Values: 'ip','icmp','tcp','udp'.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The rule_action of the network acl entry.Valid Values: 'allow','deny'.
	RuleAction *string `json:"ruleAction,omitempty" tf:"rule_action,omitempty"`

	// The rule_number of the network acl entry. value range:[1,32766].
	RuleNumber *float64 `json:"ruleNumber,omitempty" tf:"rule_number,omitempty"`
}

type NetworkACLEntriesParameters struct {

	// The cidr_block of the network acl entry.
	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// The description of the network acl entry.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The direction of the network acl entry. Valid Values: 'in','out'.
	// +kubebuilder:validation:Required
	Direction *string `json:"direction" tf:"direction,omitempty"`

	// The icmp_code of the network acl entry.If protocol is icmp, Required.
	// +kubebuilder:validation:Optional
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The icmp_type of the network acl entry.If protocol is icmp, Required.
	// +kubebuilder:validation:Optional
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// The port_range_from of the network acl entry.If protocol is tcp or udp,Required.
	// +kubebuilder:validation:Optional
	PortRangeFrom *float64 `json:"portRangeFrom,omitempty" tf:"port_range_from,omitempty"`

	// The port_range_to of the network acl entry.If protocol is tcp or udp,Required.
	// +kubebuilder:validation:Optional
	PortRangeTo *float64 `json:"portRangeTo,omitempty" tf:"port_range_to,omitempty"`

	// The protocol of the network acl entry.Valid Values: 'ip','icmp','tcp','udp'.
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// The rule_action of the network acl entry.Valid Values: 'allow','deny'.
	// +kubebuilder:validation:Required
	RuleAction *string `json:"ruleAction" tf:"rule_action,omitempty"`

	// The rule_number of the network acl entry. value range:[1,32766].
	// +kubebuilder:validation:Required
	RuleNumber *float64 `json:"ruleNumber" tf:"rule_number,omitempty"`
}

type NetworkAclObservation struct {

	// The creation time of network acl.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NetworkACLEntries []NetworkACLEntriesObservation `json:"networkAclEntries,omitempty" tf:"network_acl_entries,omitempty"`

	// The ID of the network ACL.
	NetworkACLID *string `json:"networkAclId,omitempty" tf:"network_acl_id,omitempty"`

	// The name of the network ACL.
	NetworkACLName *string `json:"networkAclName,omitempty" tf:"network_acl_name,omitempty"`

	// The id of the vpc.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type NetworkAclParameters struct {

	// +kubebuilder:validation:Optional
	NetworkACLEntries []NetworkACLEntriesParameters `json:"networkAclEntries,omitempty" tf:"network_acl_entries,omitempty"`

	// The name of the network ACL.
	// +kubebuilder:validation:Optional
	NetworkACLName *string `json:"networkAclName,omitempty" tf:"network_acl_name,omitempty"`

	// The id of the vpc.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// NetworkAclSpec defines the desired state of NetworkAcl
type NetworkAclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkAclParameters `json:"forProvider"`
}

// NetworkAclStatus defines the observed state of NetworkAcl.
type NetworkAclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkAcl is the Schema for the NetworkAcls API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type NetworkAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkAclSpec   `json:"spec"`
	Status            NetworkAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkAclList contains a list of NetworkAcls
type NetworkAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkAcl `json:"items"`
}

// Repository type metadata.
var (
	NetworkAcl_Kind             = "NetworkAcl"
	NetworkAcl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkAcl_Kind}.String()
	NetworkAcl_KindAPIVersion   = NetworkAcl_Kind + "." + CRDGroupVersion.String()
	NetworkAcl_GroupVersionKind = CRDGroupVersion.WithKind(NetworkAcl_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkAcl{}, &NetworkAclList{})
}
