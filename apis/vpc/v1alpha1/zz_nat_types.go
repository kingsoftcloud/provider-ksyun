/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATIPSetObservation struct {
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	NATIPID *string `json:"natIpId,omitempty" tf:"nat_ip_id,omitempty"`
}

type NATIPSetParameters struct {
}

type NatObservation struct {

	// The BandWidth of Nat Ip, value range:[1, 15000], Default is 1.
	BandWidth *float64 `json:"bandWidth,omitempty" tf:"band_width,omitempty"`

	// charge type, valid values: 'Monthly', 'Peak', 'Daily', 'PostPaidByAdvanced95Peak', 'DailyPaidByTransfer'. Default is DailyPaidByTransfer.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The time of creation of Nat.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Counts of Nat Ip, value range:[1, 20], Default is 1.
	NATIPNumber *float64 `json:"natIpNumber,omitempty" tf:"nat_ip_number,omitempty"`

	// The nat ip list of the desired Nat.
	NATIPSet []NATIPSetObservation `json:"natIpSet,omitempty" tf:"nat_ip_set,omitempty"`

	// ID of the line.
	NATLineID *string `json:"natLineId,omitempty" tf:"nat_line_id,omitempty"`

	// Mode of the NAT, valid values: 'Vpc', 'Subnet'.
	NATMode *string `json:"natMode,omitempty" tf:"nat_mode,omitempty"`

	// Name of the NAT.
	NATName *string `json:"natName,omitempty" tf:"nat_name,omitempty"`

	// Type of the NAT, valid values: 'public'.
	NATType *string `json:"natType,omitempty" tf:"nat_type,omitempty"`

	// ID of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The PurchaseTime of the Nat, value range [1, 36]. If charge_type is Monthly this Field is Required.
	PurchaseTime *float64 `json:"purchaseTime,omitempty" tf:"purchase_time,omitempty"`

	// ID of the VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type NatParameters struct {

	// The BandWidth of Nat Ip, value range:[1, 15000], Default is 1.
	// +kubebuilder:validation:Optional
	BandWidth *float64 `json:"bandWidth,omitempty" tf:"band_width,omitempty"`

	// charge type, valid values: 'Monthly', 'Peak', 'Daily', 'PostPaidByAdvanced95Peak', 'DailyPaidByTransfer'. Default is DailyPaidByTransfer.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The Counts of Nat Ip, value range:[1, 20], Default is 1.
	// +kubebuilder:validation:Optional
	NATIPNumber *float64 `json:"natIpNumber,omitempty" tf:"nat_ip_number,omitempty"`

	// ID of the line.
	// +kubebuilder:validation:Optional
	NATLineID *string `json:"natLineId,omitempty" tf:"nat_line_id,omitempty"`

	// Mode of the NAT, valid values: 'Vpc', 'Subnet'.
	// +kubebuilder:validation:Optional
	NATMode *string `json:"natMode,omitempty" tf:"nat_mode,omitempty"`

	// Name of the NAT.
	// +kubebuilder:validation:Optional
	NATName *string `json:"natName,omitempty" tf:"nat_name,omitempty"`

	// Type of the NAT, valid values: 'public'.
	// +kubebuilder:validation:Optional
	NATType *string `json:"natType,omitempty" tf:"nat_type,omitempty"`

	// ID of the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The PurchaseTime of the Nat, value range [1, 36]. If charge_type is Monthly this Field is Required.
	// +kubebuilder:validation:Optional
	PurchaseTime *float64 `json:"purchaseTime,omitempty" tf:"purchase_time,omitempty"`

	// ID of the VPC.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// NatSpec defines the desired state of Nat
type NatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatParameters `json:"forProvider"`
}

// NatStatus defines the observed state of Nat.
type NatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Nat is the Schema for the Nats API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type Nat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bandWidth)",message="bandWidth is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.natMode)",message="natMode is a required parameter"
	Spec   NatSpec   `json:"spec"`
	Status NatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatList contains a list of Nats
type NatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nat `json:"items"`
}

// Repository type metadata.
var (
	Nat_Kind             = "Nat"
	Nat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nat_Kind}.String()
	Nat_KindAPIVersion   = Nat_Kind + "." + CRDGroupVersion.String()
	Nat_GroupVersionKind = CRDGroupVersion.WithKind(Nat_Kind)
)

func init() {
	SchemeBuilder.Register(&Nat{}, &NatList{})
}
