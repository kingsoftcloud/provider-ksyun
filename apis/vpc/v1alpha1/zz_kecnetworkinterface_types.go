/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KecNetworkInterfaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The instance id to bind with the network interface.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of the network interface.
	NetworkInterfaceName *string `json:"networkInterfaceName,omitempty" tf:"network_interface_name,omitempty"`

	// Private IP.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// The count of secondary private id address automatically assigned. <br> Notes:  `secondary_private_ip_address_count` conflict with `secondary_private_ips`.
	SecondaryPrivateIPAddressCount *float64 `json:"secondaryPrivateIpAddressCount,omitempty" tf:"secondary_private_ip_address_count,omitempty"`

	SecondaryPrivateIps []SecondaryPrivateIpsObservation `json:"secondaryPrivateIps,omitempty" tf:"secondary_private_ips,omitempty"`

	// A list of security group IDs.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// The ID of the subnet which the network interface belongs to.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type KecNetworkInterfaceParameters struct {

	// The name of the network interface.
	// +kubebuilder:validation:Optional
	NetworkInterfaceName *string `json:"networkInterfaceName,omitempty" tf:"network_interface_name,omitempty"`

	// Private IP.
	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// The count of secondary private id address automatically assigned. <br> Notes:  `secondary_private_ip_address_count` conflict with `secondary_private_ips`.
	// +kubebuilder:validation:Optional
	SecondaryPrivateIPAddressCount *float64 `json:"secondaryPrivateIpAddressCount,omitempty" tf:"secondary_private_ip_address_count,omitempty"`

	// +kubebuilder:validation:Optional
	SecondaryPrivateIps []SecondaryPrivateIpsParameters `json:"secondaryPrivateIps,omitempty" tf:"secondary_private_ips,omitempty"`

	// A list of security group IDs.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// The ID of the subnet which the network interface belongs to.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type SecondaryPrivateIpsObservation struct {

	// Secondary Private IP.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`
}

type SecondaryPrivateIpsParameters struct {

	// Secondary Private IP.
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`
}

// KecNetworkInterfaceSpec defines the desired state of KecNetworkInterface
type KecNetworkInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KecNetworkInterfaceParameters `json:"forProvider"`
}

// KecNetworkInterfaceStatus defines the observed state of KecNetworkInterface.
type KecNetworkInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KecNetworkInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KecNetworkInterface is the Schema for the KecNetworkInterfaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type KecNetworkInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KecNetworkInterfaceSpec   `json:"spec"`
	Status            KecNetworkInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KecNetworkInterfaceList contains a list of KecNetworkInterfaces
type KecNetworkInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KecNetworkInterface `json:"items"`
}

// Repository type metadata.
var (
	KecNetworkInterface_Kind             = "KecNetworkInterface"
	KecNetworkInterface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KecNetworkInterface_Kind}.String()
	KecNetworkInterface_KindAPIVersion   = KecNetworkInterface_Kind + "." + CRDGroupVersion.String()
	KecNetworkInterface_GroupVersionKind = CRDGroupVersion.WithKind(KecNetworkInterface_Kind)
)

func init() {
	SchemeBuilder.Register(&KecNetworkInterface{}, &KecNetworkInterfaceList{})
}
