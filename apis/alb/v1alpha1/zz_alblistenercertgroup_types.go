/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlbListenerCertGroupObservation struct {

	// The ID of the ALB Listener Cert Group.
	ALBListenerCertGroupID *string `json:"albListenerCertGroupId,omitempty" tf:"alb_listener_cert_group_id,omitempty"`

	// The ID of the ALB Listener.
	ALBListenerID *string `json:"albListenerId,omitempty" tf:"alb_listener_id,omitempty"`

	Certificate []CertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AlbListenerCertGroupParameters struct {

	// The ID of the ALB Listener.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/alb/v1alpha1.AlbListener
	// +kubebuilder:validation:Optional
	ALBListenerID *string `json:"albListenerId,omitempty" tf:"alb_listener_id,omitempty"`

	// Reference to a AlbListener in alb to populate albListenerId.
	// +kubebuilder:validation:Optional
	ALBListenerIDRef *v1.Reference `json:"albListenerIdRef,omitempty" tf:"-"`

	// Selector for a AlbListener in alb to populate albListenerId.
	// +kubebuilder:validation:Optional
	ALBListenerIDSelector *v1.Selector `json:"albListenerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`
}

type CertificateObservation struct {

	// certificate authority.
	CertAuthority *string `json:"certAuthority,omitempty" tf:"cert_authority,omitempty"`

	// The ID of the certificate.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// The name of the certificate.
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// The common name on the certificate.
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// The expire time of the certificate.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`
}

type CertificateParameters struct {

	// The ID of the certificate.
	// +kubebuilder:validation:Required
	CertificateID *string `json:"certificateId" tf:"certificate_id,omitempty"`
}

// AlbListenerCertGroupSpec defines the desired state of AlbListenerCertGroup
type AlbListenerCertGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlbListenerCertGroupParameters `json:"forProvider"`
}

// AlbListenerCertGroupStatus defines the observed state of AlbListenerCertGroup.
type AlbListenerCertGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlbListenerCertGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlbListenerCertGroup is the Schema for the AlbListenerCertGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type AlbListenerCertGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlbListenerCertGroupSpec   `json:"spec"`
	Status            AlbListenerCertGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlbListenerCertGroupList contains a list of AlbListenerCertGroups
type AlbListenerCertGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlbListenerCertGroup `json:"items"`
}

// Repository type metadata.
var (
	AlbListenerCertGroup_Kind             = "AlbListenerCertGroup"
	AlbListenerCertGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlbListenerCertGroup_Kind}.String()
	AlbListenerCertGroup_KindAPIVersion   = AlbListenerCertGroup_Kind + "." + CRDGroupVersion.String()
	AlbListenerCertGroup_GroupVersionKind = CRDGroupVersion.WithKind(AlbListenerCertGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&AlbListenerCertGroup{}, &AlbListenerCertGroupList{})
}
