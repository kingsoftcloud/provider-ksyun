/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBRuleSetObservation struct {

	// Rule type. valid values: 'domain', 'url'.
	ALBRuleType *string `json:"albRuleType,omitempty" tf:"alb_rule_type,omitempty"`

	// Rule value.
	ALBRuleValue *string `json:"albRuleValue,omitempty" tf:"alb_rule_value,omitempty"`
}

type ALBRuleSetParameters struct {

	// Rule type. valid values: 'domain', 'url'.
	// +kubebuilder:validation:Required
	ALBRuleType *string `json:"albRuleType" tf:"alb_rule_type,omitempty"`

	// Rule value.
	// +kubebuilder:validation:Required
	ALBRuleValue *string `json:"albRuleValue" tf:"alb_rule_value,omitempty"`
}

type AlbRuleGroupObservation struct {

	// The ID of the ALB listener.
	ALBListenerID *string `json:"albListenerId,omitempty" tf:"alb_listener_id,omitempty"`

	// The ID of the rule group.
	ALBRuleGroupID *string `json:"albRuleGroupId,omitempty" tf:"alb_rule_group_id,omitempty"`

	// The name of the ALB rule group.
	ALBRuleGroupName *string `json:"albRuleGroupName,omitempty" tf:"alb_rule_group_name,omitempty"`

	ALBRuleSet []ALBRuleSetObservation `json:"albRuleSet,omitempty" tf:"alb_rule_set,omitempty"`

	// The ID of the backend server group.
	BackendServerGroupID *string `json:"backendServerGroupId,omitempty" tf:"backend_server_group_id,omitempty"`

	// The name of cookie. Should set it value, when `listener_sync` is off and `cookie_type` is `RewriteCookie`.
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The type of cookie, valid values: 'ImplantCookie','RewriteCookie'.
	CookieType *string `json:"cookieType,omitempty" tf:"cookie_type,omitempty"`

	// Status maintained by health examination.Valid Values:'start', 'stop'. Should set it value, when `listener_sync` is off.
	HealthCheckState *string `json:"healthCheckState,omitempty" tf:"health_check_state,omitempty"`

	// Health threshold.Valid Values:1-10. Should set it value, when `listener_sync` is off.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// The service host name of the health check, which is available only for the HTTP or HTTPS health check. Should set it value, when `listener_sync` is off.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Interval of health examination.Valid Values:1-3600. Should set it value, when `listener_sync` is off.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Whether to synchronize the health check, session persistence, and load balancing algorithm of the listener. valid values: 'on', 'off'.
	ListenerSync *string `json:"listenerSync,omitempty" tf:"listener_sync,omitempty"`

	// Forwarding mode of listener. Valid Values:'RoundRobin', 'LeastConnections'.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Session hold timeout. Valid Values:1-86400. Should set it value, when `listener_sync` is off.
	SessionPersistencePeriod *float64 `json:"sessionPersistencePeriod,omitempty" tf:"session_persistence_period,omitempty"`

	// The state of session. Valid Values:'start', 'stop'. Should set it value, when `listener_sync` is off.
	SessionState *string `json:"sessionState,omitempty" tf:"session_state,omitempty"`

	// Health check timeout.Valid Values:1-3600. Should set it value, when `listener_sync` is off.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Link to HTTP type listener health check. Should set it value, when `listener_sync` is off.
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`

	// Unhealthy threshold.Valid Values:1-10. Should set it value, when `listener_sync` is off.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type AlbRuleGroupParameters struct {

	// The ID of the ALB listener.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/alb/v1alpha1.AlbListener
	// +kubebuilder:validation:Optional
	ALBListenerID *string `json:"albListenerId,omitempty" tf:"alb_listener_id,omitempty"`

	// Reference to a AlbListener in alb to populate albListenerId.
	// +kubebuilder:validation:Optional
	ALBListenerIDRef *v1.Reference `json:"albListenerIdRef,omitempty" tf:"-"`

	// Selector for a AlbListener in alb to populate albListenerId.
	// +kubebuilder:validation:Optional
	ALBListenerIDSelector *v1.Selector `json:"albListenerIdSelector,omitempty" tf:"-"`

	// The name of the ALB rule group.
	// +kubebuilder:validation:Optional
	ALBRuleGroupName *string `json:"albRuleGroupName,omitempty" tf:"alb_rule_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ALBRuleSet []ALBRuleSetParameters `json:"albRuleSet,omitempty" tf:"alb_rule_set,omitempty"`

	// The ID of the backend server group.
	// +crossplane:generate:reference:type=github.com/kingsoftcloud/provider-ksyun/apis/slb/v1alpha1.LbBackendServerGroup
	// +kubebuilder:validation:Optional
	BackendServerGroupID *string `json:"backendServerGroupId,omitempty" tf:"backend_server_group_id,omitempty"`

	// Reference to a LbBackendServerGroup in slb to populate backendServerGroupId.
	// +kubebuilder:validation:Optional
	BackendServerGroupIDRef *v1.Reference `json:"backendServerGroupIdRef,omitempty" tf:"-"`

	// Selector for a LbBackendServerGroup in slb to populate backendServerGroupId.
	// +kubebuilder:validation:Optional
	BackendServerGroupIDSelector *v1.Selector `json:"backendServerGroupIdSelector,omitempty" tf:"-"`

	// The name of cookie. Should set it value, when `listener_sync` is off and `cookie_type` is `RewriteCookie`.
	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The type of cookie, valid values: 'ImplantCookie','RewriteCookie'.
	// +kubebuilder:validation:Optional
	CookieType *string `json:"cookieType,omitempty" tf:"cookie_type,omitempty"`

	// Status maintained by health examination.Valid Values:'start', 'stop'. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	HealthCheckState *string `json:"healthCheckState,omitempty" tf:"health_check_state,omitempty"`

	// Health threshold.Valid Values:1-10. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// The service host name of the health check, which is available only for the HTTP or HTTPS health check. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Interval of health examination.Valid Values:1-3600. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Whether to synchronize the health check, session persistence, and load balancing algorithm of the listener. valid values: 'on', 'off'.
	// +kubebuilder:validation:Optional
	ListenerSync *string `json:"listenerSync,omitempty" tf:"listener_sync,omitempty"`

	// Forwarding mode of listener. Valid Values:'RoundRobin', 'LeastConnections'.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Session hold timeout. Valid Values:1-86400. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	SessionPersistencePeriod *float64 `json:"sessionPersistencePeriod,omitempty" tf:"session_persistence_period,omitempty"`

	// The state of session. Valid Values:'start', 'stop'. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	SessionState *string `json:"sessionState,omitempty" tf:"session_state,omitempty"`

	// Health check timeout.Valid Values:1-3600. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Link to HTTP type listener health check. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`

	// Unhealthy threshold.Valid Values:1-10. Should set it value, when `listener_sync` is off.
	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

// AlbRuleGroupSpec defines the desired state of AlbRuleGroup
type AlbRuleGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlbRuleGroupParameters `json:"forProvider"`
}

// AlbRuleGroupStatus defines the observed state of AlbRuleGroup.
type AlbRuleGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlbRuleGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlbRuleGroup is the Schema for the AlbRuleGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ksyun}
type AlbRuleGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.albRuleSet)",message="albRuleSet is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.listenerSync)",message="listenerSync is a required parameter"
	Spec   AlbRuleGroupSpec   `json:"spec"`
	Status AlbRuleGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlbRuleGroupList contains a list of AlbRuleGroups
type AlbRuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlbRuleGroup `json:"items"`
}

// Repository type metadata.
var (
	AlbRuleGroup_Kind             = "AlbRuleGroup"
	AlbRuleGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlbRuleGroup_Kind}.String()
	AlbRuleGroup_KindAPIVersion   = AlbRuleGroup_Kind + "." + CRDGroupVersion.String()
	AlbRuleGroup_GroupVersionKind = CRDGroupVersion.WithKind(AlbRuleGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&AlbRuleGroup{}, &AlbRuleGroupList{})
}
